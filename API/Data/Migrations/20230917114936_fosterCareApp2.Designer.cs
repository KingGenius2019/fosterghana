// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(ApplicationDbConext))]
    [Migration("20230917114936_fosterCareApp2")]
    partial class fosterCareApp2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("OrderedNumber");

            modelBuilder.HasSequence<int>("OrderNumbers");

            modelBuilder.Entity("API.ApplicantEducation", b =>
                {
                    b.Property<int>("EduId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EduId"));

                    b.Property<string>("ApplicantUserName")
                        .HasColumnType("text");

                    b.Property<string>("Course")
                        .HasColumnType("text");

                    b.Property<string>("InstitutionName")
                        .HasColumnType("text");

                    b.Property<string>("Qualification")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("YearOfGraduation")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("EduId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicantEducations");
                });

            modelBuilder.Entity("API.Entities.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("API.Entities.AppUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("API.Entities.ApplicantAddress", b =>
                {
                    b.Property<int>("AddIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AddIn"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<string>("ApplicantUserName")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("LandMark")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PermanentHomeAddress")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("TownOfResidence")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.HasKey("AddIn");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("ApplicantAddress");
                });

            modelBuilder.Entity("API.Entities.ApplicantContact", b =>
                {
                    b.Property<int>("ContId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ContId"));

                    b.Property<string>("EmailAddress")
                        .HasColumnType("text");

                    b.Property<string>("PreferenceCorrepondence")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryContactNo")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryContactNo")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("ContId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ApplicantContacts");
                });

            modelBuilder.Entity("API.Entities.ApplicantEmploymentHistory", b =>
                {
                    b.Property<int>("OccId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OccId"));

                    b.Property<string>("ApplicantUserName")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateExited")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStarted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LocationOfEmployer")
                        .HasColumnType("text");

                    b.Property<string>("NameOfEmployer")
                        .HasColumnType("text");

                    b.Property<string>("Occupation")
                        .HasColumnType("text");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("OccId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicantEmploymentHistories");
                });

            modelBuilder.Entity("API.Entities.ApplicantHomeStudyReport", b =>
                {
                    b.Property<int>("HomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HomeId"));

                    b.Property<int>("ApplyId")
                        .HasColumnType("integer");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("HomeDocumentTitle")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("HomeId");

                    b.HasIndex("ApplyId")
                        .IsUnique();

                    b.ToTable("ApplicantHomeStudyReports");
                });

            modelBuilder.Entity("API.Entities.ApplicantHousehold", b =>
                {
                    b.Property<int>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FamilyId"));

                    b.Property<string>("AgesAdult")
                        .HasColumnType("text");

                    b.Property<string>("AgesChildren")
                        .HasColumnType("text");

                    b.Property<string>("ApplicantUserName")
                        .HasColumnType("text");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("text");

                    b.Property<int>("NoOfAdultFemale")
                        .HasColumnType("integer");

                    b.Property<int>("NoOfAdultMale")
                        .HasColumnType("integer");

                    b.Property<int>("NoOfChildrenFemale")
                        .HasColumnType("integer");

                    b.Property<int>("NoOfChildrenMale")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("FamilyId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicantHouseholds");
                });

            modelBuilder.Entity("API.Entities.ApplicantPhotos", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PhotoId"));

                    b.Property<int>("AppId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateUploded")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("FosterApplicationsAppId")
                        .HasColumnType("integer");

                    b.Property<string>("PhotoName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("PhotoId");

                    b.HasIndex("FosterApplicationsAppId");

                    b.ToTable("ApplicantPhotos");
                });

            modelBuilder.Entity("API.Entities.ApplicantProfile", b =>
                {
                    b.Property<int>("ProId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProId"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateofBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FName")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("MName")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("SName")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("ProId");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("ApplicantProfiles");
                });

            modelBuilder.Entity("API.Entities.ApplicantReferences", b =>
                {
                    b.Property<int>("RefId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RefId"));

                    b.Property<DateTime>("DateOfRelationship")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NameOfReferee")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefereeEmail")
                        .HasColumnType("text");

                    b.Property<string>("RefereePhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RelationshipWithReferee")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("RefId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicantReferences");
                });

            modelBuilder.Entity("API.Entities.ApplicationApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateApprovalWasDone")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("FosterApplicationsAppId")
                        .HasColumnType("integer");

                    b.Property<string>("FosterParentApproved")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FosterApplicationsAppId");

                    b.ToTable("ApplicationApprovals");
                });

            modelBuilder.Entity("API.Entities.ApplicationIdentification", b =>
                {
                    b.Property<int>("IdentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdentId"));

                    b.Property<string>("ApplicantUserName")
                        .HasColumnType("text");

                    b.Property<string>("IdentityPicture")
                        .HasColumnType("text");

                    b.Property<string>("NationalIdNo")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("NationalIdType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("IdentId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ApplicationIdentification");
                });

            modelBuilder.Entity("API.Entities.AssessApplication", b =>
                {
                    b.Property<int>("AssessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AssessId"));

                    b.Property<int>("ApplyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AssesDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Assessedby")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("CanFoster")
                        .HasColumnType("boolean");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAssesed")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("FosterApplicationsAppId")
                        .HasColumnType("integer");

                    b.HasKey("AssessId");

                    b.HasIndex("FosterApplicationsAppId");

                    b.ToTable("AssessApplications");
                });

            modelBuilder.Entity("API.Entities.Child", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateFound")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DefaultCode")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("District")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("KnownAs")
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("text");

                    b.Property<string>("PlaceOfBirth")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Region")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("Religion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("SequenceNumbers")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"OrderNumbers\"')");

                    b.Property<string>("Sex")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SurName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("API.Entities.ChildApproval", b =>
                {
                    b.Property<int>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppId"));

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ChildId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AppId");

                    b.HasIndex("ChildId");

                    b.ToTable("ChildApprovals");
                });

            modelBuilder.Entity("API.Entities.ChildFamilyDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChildId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCareGiver")
                        .HasColumnType("boolean");

                    b.Property<string>("NameOfRelation")
                        .HasColumnType("text");

                    b.Property<string>("Relationship")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.ToTable("ChildFamilyDetails");
                });

            modelBuilder.Entity("API.Entities.ChildMedicalReport", b =>
                {
                    b.Property<int>("StudyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudyId"));

                    b.Property<int>("ChildId")
                        .HasColumnType("integer");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("MedicalDocPath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TitleOfDocument")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("StudyId");

                    b.HasIndex("ChildId");

                    b.ToTable("ChildMedicalReports");
                });

            modelBuilder.Entity("API.Entities.ChildPhotos", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PhotoId"));

                    b.Property<int>("ChildId")
                        .HasColumnType("integer");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("PhotoId");

                    b.HasIndex("ChildId");

                    b.ToTable("ChildPhotos");
                });

            modelBuilder.Entity("API.Entities.ChildStudyReport", b =>
                {
                    b.Property<int>("StudyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StudyId"));

                    b.Property<int>("ChildId")
                        .HasColumnType("integer");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DocumentTitle")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("StudyId");

                    b.HasIndex("ChildId")
                        .IsUnique();

                    b.ToTable("ChildStudyReports");
                });

            modelBuilder.Entity("API.Entities.Districts", b =>
                {
                    b.Property<int>("DisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DisId"));

                    b.Property<string>("DistrictCode")
                        .HasColumnType("text");

                    b.Property<string>("Districtname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer");

                    b.HasKey("DisId");

                    b.HasIndex("RegionId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("API.Entities.EducationalHistory", b =>
                {
                    b.Property<int>("EduId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EduId"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<string>("ApplicantUserName")
                        .HasColumnType("text");

                    b.Property<string>("Course")
                        .HasColumnType("text");

                    b.Property<string>("InstitutionName")
                        .HasColumnType("text");

                    b.Property<string>("Qualification")
                        .HasColumnType("text");

                    b.Property<DateTime>("YearOfGraduation")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("EduId");

                    b.HasIndex("AppUserId");

                    b.ToTable("EducationalHistory");
                });

            modelBuilder.Entity("API.Entities.FosterApplications", b =>
                {
                    b.Property<int>("AppId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppId"));

                    b.Property<string>("AcceptChildWithSpecialNeeds")
                        .HasColumnType("text");

                    b.Property<string>("ApplicantUserName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("DefaultAppCode")
                        .HasColumnType("text");

                    b.Property<bool>("IsApplicationApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("IsApplocationReviewed")
                        .HasColumnType("text");

                    b.Property<string>("NatureOfApplication")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfChildren")
                        .HasColumnType("integer");

                    b.Property<string>("PreferredChildXtics")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PreferredMaxChildAge")
                        .HasColumnType("integer");

                    b.Property<int>("PreferredMinChildAge")
                        .HasColumnType("integer");

                    b.Property<string>("ReadyToLetGofChild")
                        .HasColumnType("text");

                    b.Property<int>("SequenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"OrderedNumber\"')");

                    b.Property<string>("SpecifyChildWithSpecialNeeds")
                        .HasColumnType("text");

                    b.Property<string>("TypeOfFosterCare")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("AppId");

                    b.HasIndex("UserId");

                    b.ToTable("FosterApplications");
                });

            modelBuilder.Entity("API.Entities.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("API.Entities.Placement", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlaceId"));

                    b.Property<int>("ApplyId")
                        .HasColumnType("integer");

                    b.Property<int>("Childid")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("MatchedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PlacementBy")
                        .HasColumnType("text");

                    b.Property<bool>("TheApplicationAcepted")
                        .HasColumnType("boolean");

                    b.HasKey("PlaceId");

                    b.HasIndex("ApplyId")
                        .IsUnique();

                    b.HasIndex("Childid");

                    b.ToTable("Placements");
                });

            modelBuilder.Entity("API.Entities.Profession", b =>
                {
                    b.Property<string>("ProCode")
                        .HasColumnType("text");

                    b.Property<string>("NameOfProfession")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProCode");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("API.Entities.RegionsInGhana", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RegionId"));

                    b.Property<string>("RegionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RegionId");

                    b.HasAlternateKey("RegionCode")
                        .HasName("AlternateKey_RegionCode");

                    b.ToTable("RegionsInGhana");
                });

            modelBuilder.Entity("API.Entities.ReviewChild", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReviewId"));

                    b.Property<bool>("CanGoIntoFoster")
                        .HasColumnType("boolean");

                    b.Property<int>("ChildId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReviewBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ReviewId");

                    b.HasIndex("ChildId");

                    b.ToTable("ReviewChildren");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("API.ApplicantEducation", b =>
                {
                    b.HasOne("API.Entities.Identity.AppUser", "User")
                        .WithMany("ApplicantEducations")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.AppUserRole", b =>
                {
                    b.HasOne("API.Entities.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Identity.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.ApplicantAddress", b =>
                {
                    b.HasOne("API.Entities.Identity.AppUser", "User")
                        .WithOne("ApplicantAddress")
                        .HasForeignKey("API.Entities.ApplicantAddress", "AppUserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.ApplicantContact", b =>
                {
                    b.HasOne("API.Entities.Identity.AppUser", "User")
                        .WithOne("ApplicantContacts")
                        .HasForeignKey("API.Entities.ApplicantContact", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.ApplicantEmploymentHistory", b =>
                {
                    b.HasOne("API.Entities.Identity.AppUser", "User")
                        .WithMany("ApplicantEmploymentHistories")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.ApplicantHomeStudyReport", b =>
                {
                    b.HasOne("API.Entities.FosterApplications", "FosterApplications")
                        .WithOne("ApplicantHomeStudyReports")
                        .HasForeignKey("API.Entities.ApplicantHomeStudyReport", "ApplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FosterApplications");
                });

            modelBuilder.Entity("API.Entities.ApplicantHousehold", b =>
                {
                    b.HasOne("API.Entities.Identity.AppUser", "User")
                        .WithMany("ApplicantHouseholds")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.ApplicantPhotos", b =>
                {
                    b.HasOne("API.Entities.FosterApplications", "FosterApplications")
                        .WithMany("ApplicantPhotos")
                        .HasForeignKey("FosterApplicationsAppId");

                    b.Navigation("FosterApplications");
                });

            modelBuilder.Entity("API.Entities.ApplicantProfile", b =>
                {
                    b.HasOne("API.Entities.Identity.AppUser", "User")
                        .WithOne("ApplicantProfiles")
                        .HasForeignKey("API.Entities.ApplicantProfile", "AppUserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.ApplicantReferences", b =>
                {
                    b.HasOne("API.Entities.Identity.AppUser", "User")
                        .WithMany("ApplicantReferences")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.ApplicationApproval", b =>
                {
                    b.HasOne("API.Entities.FosterApplications", "FosterApplications")
                        .WithMany("ApplicationApprovals")
                        .HasForeignKey("FosterApplicationsAppId");

                    b.Navigation("FosterApplications");
                });

            modelBuilder.Entity("API.Entities.ApplicationIdentification", b =>
                {
                    b.HasOne("API.Entities.Identity.AppUser", "User")
                        .WithOne("ApplicationIdentification")
                        .HasForeignKey("API.Entities.ApplicationIdentification", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.AssessApplication", b =>
                {
                    b.HasOne("API.Entities.FosterApplications", "FosterApplications")
                        .WithMany("AssessApplications")
                        .HasForeignKey("FosterApplicationsAppId");

                    b.Navigation("FosterApplications");
                });

            modelBuilder.Entity("API.Entities.ChildApproval", b =>
                {
                    b.HasOne("API.Entities.Child", "Child")
                        .WithMany("ChildApprovals")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");
                });

            modelBuilder.Entity("API.Entities.ChildFamilyDetail", b =>
                {
                    b.HasOne("API.Entities.Child", "Child")
                        .WithMany("ChildFamilyDetails")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");
                });

            modelBuilder.Entity("API.Entities.ChildMedicalReport", b =>
                {
                    b.HasOne("API.Entities.Child", "Child")
                        .WithMany("ChildMedicalReports")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");
                });

            modelBuilder.Entity("API.Entities.ChildPhotos", b =>
                {
                    b.HasOne("API.Entities.Child", "Child")
                        .WithMany("ChildPhotos")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");
                });

            modelBuilder.Entity("API.Entities.ChildStudyReport", b =>
                {
                    b.HasOne("API.Entities.Child", "Child")
                        .WithOne("ChildStudyReports")
                        .HasForeignKey("API.Entities.ChildStudyReport", "ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");
                });

            modelBuilder.Entity("API.Entities.Districts", b =>
                {
                    b.HasOne("API.Entities.RegionsInGhana", "RegionsGhana")
                        .WithMany("Districts")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegionsGhana");
                });

            modelBuilder.Entity("API.Entities.EducationalHistory", b =>
                {
                    b.HasOne("API.Entities.Identity.AppUser", "User")
                        .WithMany("EducationalHistory")
                        .HasForeignKey("AppUserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.FosterApplications", b =>
                {
                    b.HasOne("API.Entities.Identity.AppUser", "User")
                        .WithMany("FosterApplications")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("API.Entities.Placement", b =>
                {
                    b.HasOne("API.Entities.FosterApplications", "Applications")
                        .WithOne("ParentPlacement")
                        .HasForeignKey("API.Entities.Placement", "ApplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Child", "Children")
                        .WithMany("ChildPlacement")
                        .HasForeignKey("Childid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applications");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("API.Entities.ReviewChild", b =>
                {
                    b.HasOne("API.Entities.Child", "Child")
                        .WithMany("ReviewChildren")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("API.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("API.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("API.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("API.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Entities.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("API.Entities.Child", b =>
                {
                    b.Navigation("ChildApprovals");

                    b.Navigation("ChildFamilyDetails");

                    b.Navigation("ChildMedicalReports");

                    b.Navigation("ChildPhotos");

                    b.Navigation("ChildPlacement");

                    b.Navigation("ChildStudyReports");

                    b.Navigation("ReviewChildren");
                });

            modelBuilder.Entity("API.Entities.FosterApplications", b =>
                {
                    b.Navigation("ApplicantHomeStudyReports");

                    b.Navigation("ApplicantPhotos");

                    b.Navigation("ApplicationApprovals");

                    b.Navigation("AssessApplications");

                    b.Navigation("ParentPlacement");
                });

            modelBuilder.Entity("API.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("ApplicantAddress");

                    b.Navigation("ApplicantContacts");

                    b.Navigation("ApplicantEducations");

                    b.Navigation("ApplicantEmploymentHistories");

                    b.Navigation("ApplicantHouseholds");

                    b.Navigation("ApplicantProfiles");

                    b.Navigation("ApplicantReferences");

                    b.Navigation("ApplicationIdentification");

                    b.Navigation("EducationalHistory");

                    b.Navigation("FosterApplications");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("API.Entities.RegionsInGhana", b =>
                {
                    b.Navigation("Districts");
                });
#pragma warning restore 612, 618
        }
    }
}
